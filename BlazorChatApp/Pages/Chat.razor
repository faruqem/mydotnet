@page "/"
@using BlazorChatApp.Models
@using BlazorChatApp.Services
@inject IChatService ChatService
@inject IJSRuntime JS

<PageTitle>AI Chat</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-chat-dots"></i>
                        AI Chat Assistant
                    </h4>
                </div>
                
                <div class="card-body d-flex flex-column p-0">
                    <!-- Chat Messages Area -->
                    <div class="flex-grow-1 overflow-auto p-3" style="height: 0;" @ref="chatContainer">
                        @if (!messages.Any())
                        {
                            <div class="text-center text-muted mt-5">
                                <i class="bi bi-chat-text display-4"></i>
                                <p class="mt-2">Start a conversation with the AI assistant!</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var message in messages)
                            {
                                <div class="mb-3">
                                    @if (message.IsUser)
                                    {
                                        <!-- User Message -->
                                        <div class="d-flex justify-content-end">
                                            <div class="message user-message bg-primary text-white rounded-3 p-3 max-width-70">
                                                <div class="mb-1">
                                                    @message.Content
                                                </div>
                                                <small class="opacity-75">
                                                    @message.Timestamp.ToString("HH:mm")
                                                </small>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <!-- AI Message -->
                                        <div class="d-flex justify-content-start">
                                            <div class="message ai-message bg-light rounded-3 p-3 max-width-70">
                                                <div class="mb-1">
                                                    @message.Content
                                                </div>
                                                <small class="text-muted">
                                                    @message.Timestamp.ToString("HH:mm")
                                                </small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                        
                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-start">
                                <div class="message ai-message bg-light rounded-3 p-3 max-width-70">
                                    <div class="typing-indicator">
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Input Area -->
                    <div class="border-top p-3">
                        <div class="input-group">
                            <input @bind="currentMessage" 
                                   @onkeypress="HandleKeyPress"
                                   @ref="messageInput"
                                   type="text" 
                                   class="form-control" 
                                   placeholder="Type your message here..." 
                                   disabled="@isLoading"
                                   maxlength="1000" />
                            <button class="btn btn-primary" 
                                    type="button" 
                                    disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))"
                                    @onclick="SendMessage">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="bi bi-send"></i>
                                }
                                Send
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(currentMessage))
                        {
                            <small class="text-muted">
                                @(currentMessage.Length)/1000 characters
                            </small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .max-width-70 {
        max-width: 70%;
    }
    
    .message {
        word-wrap: break-word;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 2px;
    }
    
    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #999;
        border-radius: 50%;
        display: inline-block;
        animation: typing 1.4s infinite ease-in-out both;
    }
    
    .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
    .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
    
    @keyframes typing {
        0%, 80%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }
    
    .card {
        border: none;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }
    
    html, body, #app {
        height: 100%;
    }
</style>

@code {
    private List<ChatMessage> messages = new();
    private string currentMessage = "";
    private bool isLoading = false;
    private ElementReference chatContainer;
    private ElementReference messageInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await messageInput.FocusAsync();
        }
        
        // Auto-scroll to bottom when new messages are added
        await ScrollToBottom();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        var userMessage = currentMessage.Trim();
        currentMessage = "";
        
        // Add user message
        messages.Add(new ChatMessage 
        { 
            Content = userMessage, 
            IsUser = true 
        });

        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Get AI response
            var aiResponse = await ChatService.SendMessageAsync(messages);
            
            // Add AI response
            messages.Add(new ChatMessage 
            { 
                Content = aiResponse, 
                IsUser = false 
            });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage 
            { 
                Content = "Sorry, I'm having trouble connecting right now. Please try again later.", 
                IsUser = false 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await messageInput.FocusAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Small delay to ensure DOM is updated
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }
}

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>